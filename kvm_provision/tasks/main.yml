---
# tasks file for kvm_provision

- name: Ensure requirements in place
  ansible.builtin.package:
    name:
      - guestfs-tools
      - libvirt-python
      - python-lxml
    state: present
  become: true

- name: Ensure pool directory exists
  ansible.builtin.file:
    path: "{{ kvm_provision_libvirt_pool_dir }}"
    state: directory

- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: false

- name: Create VM if it does not exist
  vars:
    user_prompt: "\n"
    user_allowed_option:
      "1": "Install standard VM"
      "2": "New VM booting from ISO"
  when: "kvm_provision_vm_name not in existing_vms.list_vms"
  block:
    - name: Preparing user_prompt from user_allowed_options
      ansible.builtin.set_fact:
        user_prompt: "{{ user_prompt }}[{{ item.key }}] {{ item.value }}\n"
      loop: "{{ user_allowed_option | dict2items }}"

    - pause:
        prompt: "{{user_prompt}}\nSelect one"
      register: install_method

    - name: Loading Bay
      when: >
        install_method.user_input is defined and
        install_method.user_input in user_allowed_option.keys()
      block:
        - name: Download base image
          ansible.builtin.get_url:
            url: "{{ kvm_provision_base_image_url }}"
            dest: "{{ kvm_provision_base_image_directory }}/"
            mode: '0660'
            checksum: "{{ kvm_provision_base_image_sha }}"
          register: base_image

        - name: Install new VM
          when: install_method.user_input == "1"
          ansible.builtin.include_role:
            name: kvm_install_standard_vm
          vars:
            image: "{{ base_image }}"

        - name: New VM booting from iso
          when: install_method.user_input == "2"
          ansible.builtin.include_role:
            name: kvm_vm_boot_from_iso
          vars:
            image: "{{ base_image }}"

    - name: Ensure VM is started
      community.libvirt.virt:
        name: "{{ kvm_provision_vm_name }}"
        state: running
      register: vm_start_results
      until: "vm_start_results is success"
      retries: 15
      delay: 2
